// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`logging should logging an error in "watch" method: stderr 1`] = `"Error: Watch error"`;

exports[`logging should logging an warning: stderr 1`] = `""`;

exports[`logging should logging an warning: stdout 1`] = `
"
WARNING in Warning"
`;

exports[`logging should logging in multi-compiler and respect the "stats" option from configuration #2: stderr 1`] = `""`;

exports[`logging should logging in multi-compiler and respect the "stats" option from configuration #2: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Child broken:
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
Entrypoint main = bundle.js
[./broken.js] x bytes {main} [built] [failed] [1 error]

ERROR in ./broken.js 1:3
Module parse failed: Unexpected token (1:3)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
> 1()2()3()
|
Child warning:
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
Entrypoint main = bundle.js
[./warning.js] x bytes {main} [built]

WARNING in Warning
Child success:
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]"
`;

exports[`logging should logging in multi-compiler and respect the "stats" option from configuration #3: stderr 1`] = `""`;

exports[`logging should logging in multi-compiler and respect the "stats" option from configuration #3: stderr 2`] = `""`;

exports[`logging should logging in multi-compiler and respect the "stats" option from configuration #3: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
Entrypoint main = bundle.js
[./broken.js] x bytes {main} [built] [failed] [1 error]

ERROR in ./broken.js 1:3
Module parse failed: Unexpected token (1:3)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
> 1()2()3()
|
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
Entrypoint main = bundle.js
[./warning.js] x bytes {main} [built]

WARNING in Warning
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]"
`;

exports[`logging should logging in multi-compiler and respect the "stats" option from configuration #3: stdout 2`] = `
"Child
Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
Entrypoint main = bundle.js
[./broken.js] x bytes {main} [built] [failed] [1 error]

ERROR in ./broken.js 1:3
Module parse failed: Unexpected token (1:3)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
> 1()2()3()
|
Child
Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
Entrypoint main = bundle.js
[./warning.js] x bytes {main} [built]

WARNING in Warning
Child
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]"
`;

exports[`logging should logging in multi-compiler and respect the "stats" option from configuration: stderr 1`] = `""`;

exports[`logging should logging in multi-compiler and respect the "stats" option from configuration: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
Entrypoint main = bundle.js
[./broken.js] x bytes {main} [built] [failed] [1 error]

ERROR in ./broken.js 1:3
Module parse failed: Unexpected token (1:3)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
> 1()2()3()
|
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
Entrypoint main = bundle.js
[./warning.js] x bytes {main} [built]

WARNING in Warning
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]"
`;

exports[`logging should logging on successfully build and respect colors #2: stderr 1`] = `""`;

exports[`logging should logging on successfully build and respect colors #2: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]"
`;

exports[`logging should logging on successfully build and respect colors: stderr 1`] = `""`;

exports[`logging should logging on successfully build and respect colors: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]"
`;

exports[`logging should logging on successfully build and respect the "NO_COLOR" env: stderr 1`] = `""`;

exports[`logging should logging on successfully build and respect the "NO_COLOR" env: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]"
`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with custom object value: stderr 1`] = `""`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with custom object value: stdout 1`] = `
"Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]"
`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with the "false" value: stderr 1`] = `""`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with the "false" value: stdout 1`] = `""`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with the "minimal" value: stderr 1`] = `""`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with the "minimal" value: stdout 1`] = `"x modules"`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with the "none" value: stderr 1`] = `""`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with the "none" value: stdout 1`] = `""`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with the "true" value: stderr 1`] = `""`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with the "true" value: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]"
`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with the "verbose" value: stderr 1`] = `""`;

exports[`logging should logging on successfully build and respect the "stats" option from configuration with the "verbose" value: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
chunk {main} bundle.js (xxxx) x bytes [entry] [rendered]
> ./foo.js main
[./foo.js] x bytes {main} [depth 0] [built]
single entry ./foo.js main
[./index.html] x bytes {main} [depth 1] [built]
[exports: default]
cjs require ./index.html [./foo.js] 4:0-23
[./svg.svg] x bytes {main} [depth 1] [built]
[exports: default]
cjs require ./svg.svg [./foo.js] 3:0-20

LOG from xxx"
`;

exports[`logging should logging on successfully build in multi-compiler mode: stderr 1`] = `""`;

exports[`logging should logging on successfully build in multi-compiler mode: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
Entrypoint main = bundle.js
[./bar.js] x bytes {main} [built]"
`;

exports[`logging should logging on successfully build using the "stats" option for middleware with object value and no colors: stderr 1`] = `""`;

exports[`logging should logging on successfully build using the "stats" option for middleware with object value and no colors: stdout 1`] = `
"Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]"
`;

exports[`logging should logging on successfully build using the "stats" option for middleware with object value: stderr 1`] = `""`;

exports[`logging should logging on successfully build using the "stats" option for middleware with object value: stdout 1`] = `
"Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]"
`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the "false" value: stderr 1`] = `""`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the "false" value: stdout 1`] = `""`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the "none" value: stderr 1`] = `""`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the "none" value: stdout 1`] = `""`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the "normal" value: stderr 1`] = `""`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the "normal" value: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]"
`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the "true" value: stderr 1`] = `""`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the "true" value: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]"
`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the "verbose" value: stderr 1`] = `""`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the "verbose" value: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
chunk {main} bundle.js (xxxx) x bytes [entry] [rendered]
> ./foo.js main
[./foo.js] x bytes {main} [depth 0] [built]
single entry ./foo.js main
[./index.html] x bytes {main} [depth 1] [built]
[exports: default]
cjs require ./index.html [./foo.js] 4:0-23
[./svg.svg] x bytes {main} [depth 1] [built]
[exports: default]
cjs require ./svg.svg [./foo.js] 3:0-20

LOG from xxx"
`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the object value and colors: stderr 1`] = `""`;

exports[`logging should logging on successfully build using the "stats" option for middleware with the object value and colors: stdout 1`] = `
"Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]"
`;

exports[`logging should logging on successfully build when the 'stats' doesn't exist: stderr 1`] = `""`;

exports[`logging should logging on successfully build when the 'stats' doesn't exist: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]"
`;

exports[`logging should logging on successfully build: stderr 1`] = `""`;

exports[`logging should logging on successfully build: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]"
`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with object value and colors: stderr 1`] = `""`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with object value and colors: stdout 1`] = `
"Child
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Child
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main"
`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with object value and no colors: stderr 1`] = `""`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with object value and no colors: stdout 1`] = `
"Child
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Child
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main"
`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with the "false" value: stderr 1`] = `""`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with the "false" value: stdout 1`] = `""`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with the "normal" value: stderr 1`] = `""`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with the "normal" value: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
Entrypoint main = bundle.js
[./bar.js] x bytes {main} [built]"
`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with the "true" value: stderr 1`] = `""`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with the "true" value: stdout 1`] = `
"Hash: xxxx
Version: webpack x.x.x
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Entrypoint main = bundle.js
[./foo.js] x bytes {main} [built]
[./index.html] x bytes {main} [built]
[./svg.svg] x bytes {main} [built]
Child
Hash: xxxx
Time: Xms
Built at: x
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
Entrypoint main = bundle.js
[./bar.js] x bytes {main} [built]"
`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with the object value: stderr 1`] = `""`;

exports[`logging should logging on successfully multi-compiler build using the "stats" option for middleware with the object value: stdout 1`] = `
"Child
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main
index.html x bytes [emitted]
svg.svg x KiB [emitted]
Child
Asset Size Chunks Chunk Names
bundle.js x KiB main [emitted] main"
`;

exports[`logging should logging on unsuccessful build in multi-compiler: stderr 1`] = `""`;

exports[`logging should logging on unsuccessful build in multi-compiler: stdout 1`] = `
"Child

ERROR in ./broken.js 1:3
Module parse failed: Unexpected token (1:3)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
> 1()2()3()
|
Child

ERROR in ./broken.js 1:3
Module parse failed: Unexpected token (1:3)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
> 1()2()3()
|"
`;

exports[`logging should logging on unsuccessful build: stderr 1`] = `""`;

exports[`logging should logging on unsuccessful build: stdout 1`] = `
"
ERROR in ./broken.js 1:3
Module parse failed: Unexpected token (1:3)
You may need an appropriate loader to handle this file type, currently no loaders are configured to process this file. See https://webpack.js.org/concepts#loaders
> 1()2()3()
|"
`;

exports[`logging should logging warnings in multi-compiler mode: stderr 1`] = `""`;

exports[`logging should logging warnings in multi-compiler mode: stdout 1`] = `
"Child

WARNING in Warning
Child

WARNING in Warning"
`;
